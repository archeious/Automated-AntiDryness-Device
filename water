#!/usr/bin/env python
# /etc/init.d/water
### BEGIN INIT INFO
# Provides:			water
# Required-Start:	$remote_fs $syslog
# Required-Stop:	$remote_fs $syslog
# Default-Start:	2 3 4 5
# Default-Stop:		0 1 6
# Short-Description:	Water the Plants, yo!
# Description:		Daemon to water to the plants automatically
### END INIT INFO

import RPi.GPIO as GPIO
import time
import datetime

MAX_TIME 	 = 60
WATER_SENSOR_PIN = 3
PUMP_RELAY_PIN 	 = 2
CYCLE_TIME 	 = 10 # one second per loop

def initialize():
	GPIO.setwarnings(False)
	GPIO.setmode(GPIO.BCM)
	GPIO.setup(PUMP_RELAY_PIN, GPIO.OUT)
	GPIO.setup(WATER_SENSOR_PIN, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)
	GPIO.output(PUMP_RELAY_PIN, GPIO.HIGH)


def log( message ):
	log = open('/var/log/water.log', 'a')
	timeStr = datetime.datetime.fromtimestamp(time.time()).strftime('%Y-%m-%d %H:%M:%S')
	log.write(timeStr + ': ' + message + '\n')
	log.close()


def pump(state):
	if state:
		GPIO.output(PUMP_RELAY_PIN, GPIO.LOW)
	else:
		GPIO.output(PUMP_RELAY_PIN, GPIO.HIGH)


def water_sensed():
	return GPIO.input(WATER_SENSOR_PIN) == GPIO.LOW


def main():
	watering  = False
	alarm     = False
	startTime = time.time()

	initialize()

	try:
		while True:
			#Soil is sufficiently moist.
			if water_sensed() and watering: # water level sufficient
				watering = False
				pump(False)				
				startTime = time.time()
				log("Watering Stopped")
			
			# Soil is dry, start AntiDryness procedure
			if not water_sensed() and not watering and not alarm: # water level level too low
				watering = True
				pump(True)
				log("Watering Started")
			
			# verify the pump is not creating too much antidryness
			if watering and (time.time() - startTime) > MAX_TIME:
				alarm = True
				pump(False)
				watering = False
				log("ERR - MAX Watering Time Exceeded. Turning off pump and preventing future waterings")
				exit()
				

			time.sleep(CYCLE_TIME)

	except KeyboardInterrupt:
		print " DONE!"
		GPIO.cleanup()

  
if __name__== "__main__":
  main()
